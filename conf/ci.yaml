# Defines continuous integration for the project

# registry defines a custom docker registry to push images that are built on the cluster
registry: {{ cluster.metadata.registry|json }}

# remotes define which microservices has to be updated when code is pushed to the remote
remotes:
  # Example:
  
  # remote-name:
  #   namespace.service-name:
  #     container-name:
  #       path: microservices/app
  #       dockerfile: microservices/app/Dockerfile
  
  # Default remote to push code and configuration
  {{ cluster.name }}:        # DO NOT edit this line
    <<: {}                   # DO NOT edit this line

    '{{ cluster.metadata.namespaces.user }}.app':
      app:
        dockerfile: microservices/app/Dockerfile
        path: microservices/app

    # Add output of `hasura conf generate-remote` below this line




    '{{ cluster.metadata.namespaces.user }}.ui':
      ui:
        dockerfile: microservices/ui/Dockerfile
        path: microservices/ui


    # '{{ cluster.metadata.namespaces.user }}.react-native':
    #   react-native:
    #     #dockerfile: microservices/react-native/Dockerfile
    #     path: microservices/react-native

Manage configuration of a cluster added to the project

Usage:
  hasura conf [command]

Aliases:
  conf, config

Available Commands:
  apply           Apply configuration to a cluster
  diff            Diff configuration of clusters
  generate-domain Generate a new domain configuration for a cluster
  generate-remote Generate remote configuration for a microservice
  generate-route  Generate a route for accessing a microservice

Flags:
  -h, --help   help for conf

Global Flags:
      --project string   hasura project directory where the commands should be executed. (default: current directory)

Use "hasura conf [command] --help" for more information about a command.
